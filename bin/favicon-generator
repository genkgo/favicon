#!/usr/bin/env php
<?php
declare(strict_types=1);

use Genkgo\Favicon\FullPackageGenerator;
use Genkgo\Favicon\Input;
use Genkgo\Favicon\InputImageType;
use Genkgo\Favicon\WebApplicationManifest;
use Genkgo\Favicon\WebApplicationManifestDisplay;

function writeln(string $line, string|int ... $values): void {
    echo sprintf($line, ...$values) . "\n";
}

final class CliContext
{
    /**
     * @param array<int, string> $arguments
     * @param array<string, string> $options
     */
    public function __construct(
        private readonly string $script,
        private readonly array $arguments,
        private readonly array $options
    ) {
    }

    public function getScript(): string
    {
        return $this->script;
    }

    public function getArgument(int $index): string
    {
        if (!array_key_exists($index, $this->arguments)) {
            throw new \InvalidArgumentException('Unknown argument at ' . $index);
        }

        return $this->arguments[$index];
    }

    public function getOption(string $name, string $default = ''): string
    {
        if (!array_key_exists($name, $this->options)) {
            return $default;
        }

        return $this->options[$name];
    }

    public static function fromArgv(array $argv): self
    {
        $script = array_shift($argv);
        $arguments = [];
        $options = [];

        while ($arg = array_shift($argv)) {
            if (str_starts_with($arg, '--')) {
                $optionString = substr($arg, 2);
                $optionSep = explode('=', $optionString, 2);
                if (count($optionSep) === 1) {
                    $options[$optionSep[0]] = '1';
                } else {
                    $options[$optionSep[0]] = $optionSep[1];
                }
            } else {
                $arguments[] = $arg;
            }
        }

        return new self($script, array_values($arguments), $options);
    }
}

(function (CliContext $context) {
    error_reporting(-1);

    $dir = __DIR__.'/..';

    if (!file_exists($dir.'/autoload.php')) {
        $dir = __DIR__.'/../vendor';
    }

    if (!file_exists($dir.'/autoload.php')) {
        $dir = __DIR__.'/../../..';
    }

    if (!file_exists($dir.'/autoload.php')) {
        writeln('Autoload not found.');
        exit(1);
    }

    require $dir.'/autoload.php';

    if ($context->getOption('help') === '1') {
        writeln('Genkgo Favicon Generator');
        writeln('Script: %s', $context->getScript());
        writeln('');
        writeln('Arguments:');
        writeln('0: name of the website');
        writeln('');
        writeln('1: input type, specify either letter or file');
        writeln('1: letter:[LETTER] for a letter avatar');
        writeln('1: file:[FILE LOCATION] for a file input');
        writeln('');
        writeln('2: output directory, defaults to current working directory');
        writeln('');
        writeln('Options:');
        writeln('--icon-background      Set color under icon, defaults to transparent');
        writeln('--theme-color          Color to used in manifest `theme_color` and default letter background color, defaults to #00AAAD');
        writeln('--tile-color           Color to used in manifest `background_color` and used fill apple touch and ms-tiles with, defaults to #00AAAD');
        writeln('--letter-color         Color of the letter, used when using letter: input, defaults to #FFFFFF');
        writeln('--letter-background    Color of the background, used when using letter: input, defaults to theme color');
        writeln('--root                 Location inside the root directory where the favicons are saved to, defaults to /');
        exit(0);
    }

    $name = $context->getArgument(0);

    try {
        $inputString = $context->getArgument(1);
    } catch (InvalidArgumentException) {
        writeln('[ERROR] Source image is required');
        exit(1);
    }

    if (str_starts_with($inputString, 'file:')) {
        $file = substr($inputString, 5);
        if (!file_exists($file)) {
            writeln('[ERROR] Input image %s does not exist', $file);
            exit(1);
        }

        $input = Input::fromFile($file, InputImageType::PNG, $context->getOption('icon-background', 'transparent'));
    } elseif (str_starts_with($inputString, 'letter:')) {
        $letter = substr($inputString, 7);
        if (strlen($letter) !== 1) {
            writeln('[ERROR] Input letter got only be 1 character, got %s', $letter);
            exit(1);
        }

        $input = Input::digit(
            $letter,
            $context->getOption('letter-color', '#FFFFFF'),
            $context->getOption('letter-background', $context->getOption('theme-color', '#00AAAD')),
            $context->getOption('icon-background', 'transparent'),
        );
    } else {
        writeln('[ERROR] Unknown input string %s. Please start with file: or letter:', $inputString);
        exit(1);
    }

    try {
        $outputDirectory = $context->getArgument(2);
    } catch (InvalidArgumentException) {
        $outputDirectory = getcwd();
    }

    $generator = FullPackageGenerator::newGenerator();
    $manifest = new WebApplicationManifest(
        WebApplicationManifestDisplay::Standalone,
        $name,
        $name,
        $context->getOption('theme-color', '#00AAAD'),
        $context->getOption('tile-color', '#00AAAD'),
    );

    foreach ($generator->package($input, $manifest, $context->getOption('root', '/')) as $fileName => $contents) {
        $pathName = $outputDirectory . '/' . $fileName;
        $result = file_put_contents($pathName, $contents);
        if ($result === false) {
            writeln('[ERROR] Failed to save %s', $pathName);
        } else {
            writeln('[INFO] Saved %s with size %s', $pathName, filesize($pathName));
        }
    }
})(CliContext::fromArgv($argv));
